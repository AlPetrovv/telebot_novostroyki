"""telebot: –ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–µ–ª–µ–≥—Ä–∞–º–º; string: –ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ —Å—Ç—Ä–æ–∫–∞–º–∏(—à–∞–±–ª–æ–Ω—ã) """
import telebot
from telebot import types
from string import Template
import os

user_dict = {}  # –∏–º–ø—Ä–æ–≤–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö, –≥–¥–µ –º—ã —Ö—Ä–∞–Ω–∏–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–µ—Ç–∏—Ç–µ–ª—è –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç (–∑–∞–º–µ–Ω–∞ –Ω–∞ sql)

bot = telebot.TeleBot(os.getenv("TOKEN"))
CHAT_ID = os.getenv("CHAT_ID")


def main():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    starts = types.KeyboardButton('/start')
    markup.add(starts)


class User:  # –º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
    """Class for data processing"""

    def __init__(self, data):
        self.data = data
        # –î–æ–¥–µ–ª–∞—Ç—å
        # keys = ['invest', 'invest_cash', 'invest_cash_reg', 'mortgage_reg', 'mortgage', 'buy', 'buy_secondary',
        #         'buy_secondary_mortgage', 'buy_secondary_mortgage_reg', 'buy_secondary_cash', 'buy_secondary_cash_reg'
        #         , 'buy_newBuilding', 'buy_newBuilding_mortgage',  'buy_newBuilding_cash',
        #         'buy_newBuilding_cash_reg', 'buy_newBuilding_mortgage_reg', 'sale', 'sale_exchange',
        #         'sale_exchange_secondary', 'sale_exchange_newBuilding', 'sale_exchange_secondary_reg',
        #         'sale_exchange_newBuilding_reg', 'sale_valuation', 'sale_valuation_reg']
        # for key in keys:
        #     self.key = None


@bot.message_handler(commands=['start'])
def start(message):
    """ function gets a message and gives the user the choice to go the next choice.

    :param message: data of chat, user, ...
    :type message: dict"""
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    inv = types.KeyboardButton('/–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏')
    sale = types.KeyboardButton('/–ü—Ä–æ–¥–∞–∂–∞')
    pay = types.KeyboardButton('/–ü–æ–∫—É–ø–∫–∞')
    markup.add(inv, sale, pay)
    bot.send_message(message.chat.id,
                     f'–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}, —è –±–æ—Ç –∏ —Ç—ã –º–æ–∂–µ—à—å –≤—ã–±—Ä–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è !',
                     reply_markup=markup)


@bot.message_handler(commands=['–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏'])
def choice_inv(message):
    chat_id = message.chat.id  # id —á–∞—Ç–∞(–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
    user_dict[chat_id] = User(message.text)
    user = user_dict[chat_id]
    user.invest = message.text
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    cash = types.KeyboardButton('–ù–∞–ª–∏—á–Ω—ã–µ')
    mortgage = types.KeyboardButton('–ò–ø–æ—Ç–µ–∫–∞')
    back = types.KeyboardButton('–ù–∞–∑–∞–¥')
    markup.add(cash, mortgage, back)
    msg = bot.send_message(chat_id, '–ü—Ä–æ–¥–æ–ª–∂–∏–º', reply_markup=markup)
    bot.register_next_step_handler(msg, transition_to_cash)
    bot.register_next_step_handler(msg, transition_to_mortgage)
    bot.register_next_step_handler(msg, return_back)


def transition_to_cash(message):
    if message.text == '–ù–∞–ª–∏—á–Ω—ã–µ':
        chat_id = message.chat.id
        user = user_dict[chat_id]
        user.invest_cash = message.text
        markup = types.ReplyKeyboardRemove(selective=False)
        msg = bot.send_message(chat_id,
                               '–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∏ –≤–∞—à –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä, —á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –≤–∞–º–∏:'
                               '(–ü—Ä–∏–º–µ—Ä: 40000000;79...)',
                               reply_markup=markup)
        bot.register_next_step_handler(msg, cheking_transition_to_cash)


def cheking_transition_to_cash(message):  # –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ
    """function gets a message,  checks it and sends data to the telegram channel"""
    try:
        chat_id = message.chat.id
        user = user_dict[chat_id]
        user.invest_cash_reg = message.text
        bot.send_message(chat_id, '–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞! –ù–∞—à —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ üòä', parse_mode='Markdown')
        bot.send_message(CHAT_ID,
                         get_data_user_inv_cash(user, '–ó–∞—è–≤–∫–∞ –æ—Ç –±–æ—Ç–∞', bot.get_me().username,
                                                message.from_user.first_name),
                         parse_mode='Markdown')
    # except Exception as e:
    except ValueError:
        bot.reply_to(message, '–ù–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö')


def get_data_user_inv_cash(user, title, bot_name, username):
    """function of decorating the output of strings in the telegram channel"""
    t = Template(
        '$title *$bot_name* \n –ò–º—è: *$username* \n –í—ã–±–æ—Ä –ø—É–Ω–∫—Ç–∞ 1: *$invest* \n –í—ã–±–æ—Ä –ø—É–Ω–∫—Ç–∞ 2: *$invest_cash* '
        '\n –î–∞–Ω–Ω—ã–µ : *$invest_cash_reg*')
    return t.substitute({
        'title': title,
        'bot_name': bot_name,
        'username': username,
        'invest': user.invest,
        'invest_cash': user.invest_cash,
        'invest_cash_reg': user.invest_cash_reg
    })


def transition_to_mortgage(message):
    if message.text == '–ò–ø–æ—Ç–µ–∫–∞':
        chat_id = message.chat.id
        user = user_dict[chat_id]
        user.mortgage = message.text
        markup = types.ReplyKeyboardRemove(selective=False)
        msg = bot.send_message(chat_id,
                               '–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–π –≤–∑–Ω–æ—Å, –∫–æ–º—Ñ–æ—Ä—Ç–Ω—ã–π –ø–ª–∞—Ç–µ–∂ –∏ –≤–∞—à –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä, '
                               '—á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ –≤–∑—è–∑–∞—Ç—å—Å—è —Å –≤–∞–º–∏ :(–ü—Ä–∏–º–µ—Ä: 40000000;1000000;15000;79...)',
                               reply_markup=markup)
        bot.register_next_step_handler(msg, checking_transition_to_mortgage)


def checking_transition_to_mortgage(message):
    try:
        chat_id = message.chat.id
        user = user_dict[chat_id]
        user.mortgage_reg = message.text
        bot.send_message(chat_id, '–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞! –ù–∞—à —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ üòä', parse_mode='Markdown')
        bot.send_message(CHAT_ID, get_data_user_inv_mortgage(user, '–ó–∞—è–≤–∫–∞ –æ—Ç –±–æ—Ç–∞', bot.get_me().username),
                         parse_mode='Markdown')
    except ValueError:
        bot.reply_to(message, '–ù–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö')


def get_data_user_inv_mortgage(user, title, bot_name):
    s = Template(
        '$title *$bot_name* \n –í—ã–±–æ—Ä –ø—É–Ω–∫—Ç–∞ 1: *$invest* \n –í—ã–±–æ—Ä –ø—É–Ω–∫—Ç–∞ 2: *$mortgage* \n –î–∞–Ω–Ω—ã–µ : *$mortgage_reg*')
    return s.substitute({
        'title': title,
        'bot_name': bot_name,
        'invest': user.invest,
        'mortgage': user.mortgage,
        'mortgage_reg': user.mortgage_reg
    })


def return_back(message):
    if message.text == '–ù–∞–∑–∞–¥':
        chat_id = message.chat.id
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        inv = types.KeyboardButton('/–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏')
        sale = types.KeyboardButton('/–ü—Ä–æ–¥–∞–∂–∞')
        buy = types.KeyboardButton('/–ü–æ–∫—É–ø–∫–∞')
        markup.add(inv, sale, buy)
        bot.send_message(chat_id, '–•–æ—Ä–æ—à–æ, –¥–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º –∑–∞–Ω–æ–≤–æ'.format(message.from_user), reply_markup=markup)


@bot.message_handler(commands=['–ü–æ–∫—É–ø–∫–∞'])
def choice_buy(message):
    chat_id = message.chat.id
    user_dict[chat_id] = User(message.text)
    user = user_dict[chat_id]
    user.buy = message.text
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    secondary = types.KeyboardButton('–í—Ç–æ—Ä–∏—á–∫–∞')
    new_building = types.KeyboardButton('–ù–æ–≤–æ—Å—Ç—Ä–æ–π–∫–∞')
    back = types.KeyboardButton('–ù–∞–∑–∞–¥')
    markup.add(secondary, new_building, back)
    msg = bot.send_message(chat_id, '–ü—Ä–æ–¥–æ–ª–∂–∏–º', reply_markup=markup)
    bot.register_next_step_handler(msg, transition_to_secondary)
    bot.register_next_step_handler(msg, transition_to_new)
    bot.register_next_step_handler(msg, back2)  # –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ return_back


def transition_to_secondary(message):
    if message.text == '–í—Ç–æ—Ä–∏—á–∫–∞':
        chat_id = message.chat.id
        user = user_dict[chat_id]
        user.buy_secondary = message.text
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        mortgage = types.KeyboardButton('–ò–ø–æ—Ç–µ–∫–∞')
        cash = types.KeyboardButton('–ù–∞–ª–∏—á–Ω—ã–µ')
        back = types.KeyboardButton('–ù–∞–∑–∞–¥')
        markup.add(mortgage, cash, back)
        msg = bot.send_message(chat_id, '–ü—Ä–æ–¥–æ–ª–∂–∏–º', reply_markup=markup)
        bot.register_next_step_handler(msg, transition_to_secondary_mortgage)
        bot.register_next_step_handler(msg, transition_to_secondary_cash)
        bot.register_next_step_handler(msg, back2)


def transition_to_secondary_mortgage(message):
    if message.text == '–ò–ø–æ—Ç–µ–∫–∞':
        chat_id = message.chat.id
        user = user_dict[chat_id]
        user.buy_secondary_mortgage = message.text
        markup = types.ReplyKeyboardRemove(selective=False)
        msg = bot.send_message(chat_id,
                               '–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–π –≤–∑–Ω–æ—Å, –∫–æ–º—Ñ–æ—Ä—Ç–Ω—ã–π –ø–ª–∞—Ç–µ–∂ –∏ –≤–∞—à –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä, '
                               '—á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ –≤–∑—è–∑–∞—Ç—å—Å—è —Å –≤–∞–º–∏:(–ü—Ä–∏–º–µ—Ä: 40000000;1000000;15000;79...)',
                               reply_markup=markup)
        bot.register_next_step_handler(msg, checking_transition_to_secondary_mortgage)


def checking_transition_to_secondary_mortgage(message):
    try:
        chat_id = message.chat.id
        user = user_dict[chat_id]
        user.buy_secondary_cash_reg = message.text
        bot.send_message(chat_id, '–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞! –ù–∞—à —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ üòä', parse_mode='Markdown')
        bot.send_message(CHAT_ID,
                         get_data_user_secondary_mortgage(user, '–ó–∞—è–≤–∫–∞ –æ—Ç –±–æ—Ç–∞', bot.get_me().username,
                                                          message.from_user.username),
                         parse_mode='Markdown')
    except ValueError:
        bot.reply_to(message, '–ù–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö')


def get_data_user_secondary_mortgage(user, title, name, username):
    f = Template(
        '$title *$name* \n –ù–∏–∫–Ω–µ–π–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: *$username*  \n –í—ã–±–æ—Ä –ø—É–Ω–∫—Ç–∞ 1: *$buy* \n –í—ã–±–æ—Ä –ø—É–Ω–∫—Ç–∞ 2: '
        '*$buy_secondary* \n –í—ã–±–æ—Ä –ø—É–Ω–∫—Ç–∞ 3: *$buy_secondary_cash* \n –î–∞–Ω–Ω—ã–µ: *$buy_secondary_cash_reg* ')
    return f.substitute({
        'title': title,
        'name': name,
        'username': username,
        'buy': user.buy,
        'buy_secondary': user.buy_secondary,
        'buy_secondary_cash': user.buy_secondary_cash,
        'buy_secondary_cash_reg': user.buy_secondary_cash_reg
    })


def transition_to_secondary_cash(message):
    if message.text == '–ù–∞–ª–∏—á–Ω—ã–µ':
        chat_id = message.chat.id
        user = user_dict[chat_id]
        user.buy_secondary_cash = message.text
        markup = types.ReplyKeyboardRemove(selective=False)
        msg = bot.send_message(chat_id,
                               '–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, –∫–æ–º—Ñ–æ—Ä—Ç–Ω—ã–π –ø–ª–∞—Ç–µ–∂ –∏ –≤–∞—à –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä, —á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ —Å–≤—è–∑–∞—Ç—å—Å—è '
                               '—Å –≤–∞–º–∏:(–ü—Ä–∏–º–µ—Ä: 40000000;79...)',
                               reply_markup=markup)
        bot.register_next_step_handler(msg, checking_transition_to_secondary_cash)


def checking_transition_to_secondary_cash(message):
    try:
        chat_id = message.chat.id
        user = user_dict[chat_id]
        user.buy_secondary_mortgage_reg = message.text
        bot.send_message(chat_id, '–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞! –ù–∞—à —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ üòä', parse_mode='Markdown')
        bot.send_message(CHAT_ID, get_data_user_secondary_cash(user, '–ó–∞—è–≤–∫–∞ –æ—Ç –±–æ—Ç–∞', bot.get_me().username),
                         parse_mode='Markdown')
    except ValueError:
        bot.reply_to(message, '–ù–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö')


def get_data_user_secondary_cash(user, title, bot_name):
    s = Template(
        '$title *$bot_name* \n –í—ã–±–æ—Ä –ø—É–Ω–∫—Ç–∞ 1: *$buy* \n –í—ã–±–æ—Ä –ø—É–Ω–∫—Ç–∞ 2: *$buy_secondary* \n –í—ã–±–æ—Ä –ø—É–Ω–∫—Ç–∞ 3: '
        '*$buy_secondary_mortgage* \n –î–∞–Ω–Ω—ã–µ: *$buy_secondary_mortgage_reg* ')
    return s.substitute({
        'title': title,
        'bot_name': bot_name,
        'buy': user.buy,
        'buy_secondary': user.buy_secondary,
        'buy_secondary_mortgage': user.buy_secondary_mortgage,
        'buy_secondary_mortgage_reg': user.buy_secondary_mortgage_reg
    })


def transition_to_new_mortgage(message):
    if message.text == '–ò–ø–æ—Ç–µ–∫–∞':
        chat_id = message.chat.id
        user = user_dict[chat_id]
        user.buy_newBuilding_mortgage = message.text
        markup = types.ReplyKeyboardRemove(selective=False)
        msg = bot.send_message(chat_id,
                               '–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–π –≤–∑–Ω–æ—Å, –∫–æ–º—Ñ–æ—Ä—Ç–Ω—ã–π –ø–ª–∞—Ç–µ–∂ –∏ –≤–∞—à –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä, '
                               '—á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ –≤–∑—è–∑–∞—Ç—å—Å—è —Å –≤–∞–º–∏:(–ü—Ä–∏–º–µ—Ä: 40000000;1000000;15000;79...)',
                               reply_markup=markup)
        bot.register_next_step_handler(msg, checking_transition_to_new_mortgage)


def transition_to_new(message):
    if message.text == '–ù–æ–≤–æ—Å—Ç—Ä–æ–π–∫–∞':
        chat_id = message.chat.id
        user = user_dict[chat_id]
        user.buy_newBuilding = message.text
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        mortgage = types.KeyboardButton('–ò–ø–æ—Ç–µ–∫–∞')
        cash = types.KeyboardButton('–ù–∞–ª–∏—á–Ω—ã–µ')
        back = types.KeyboardButton('–ù–∞–∑–∞–¥')
        markup.add(mortgage, cash, back)
        msg = bot.send_message(chat_id, '–ü—Ä–æ–¥–æ–ª–∂–∏–º', reply_markup=markup)
        bot.register_next_step_handler(msg, transition_to_new_mortgage)
        bot.register_next_step_handler(msg, transition_to_new_cash)
        bot.register_next_step_handler(msg, back2)  # change to return_step


def transition_to_new_cash(message):
    if message.text == '–ù–∞–ª–∏—á–Ω—ã–µ':
        chat_id = message.chat.id
        user = user_dict[chat_id]
        user.buy_newBuilding_cash = message.text
        markup = types.ReplyKeyboardRemove(selective=False)
        msg1 = bot.send_message(chat_id,
                                '–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∏ –≤–∞—à –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä, —á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ –≤–∑—è–∑–∞—Ç—å—Å—è —Å –≤–∞–º–∏:'
                                '(–ü—Ä–∏–º–µ—Ä: 40000000;79...)',
                                reply_markup=markup)
        bot.register_next_step_handler(msg1, checking_transition_to_new_cash)


def checking_transition_to_new_mortgage(message):
    try:
        chat_id = message.chat.id
        user = user_dict[chat_id]
        user.buy_newBuilding_mortgage_reg = message.text
        bot.send_message(chat_id, '–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞! –ù–∞—à —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ üòä', parse_mode='Markdown')
        bot.send_message(CHAT_ID, get_data_user_new_mortgage(user, '–ó–∞—è–≤–∫–∞ –æ—Ç –±–æ—Ç–∞', bot.get_me().username),
                         parse_mode='Markdown')
    except ValueError:
        bot.reply_to(message, '–ù–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö')


def checking_transition_to_new_cash(message):
    try:
        chat_id = message.chat.id
        user = user_dict[chat_id]
        user.buy_newBuilding_cash_reg = message.text
        bot.send_message(chat_id, '–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞! –ù–∞—à —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ üòä', parse_mode='Markdown')
        bot.send_message(CHAT_ID, get_data_user_new_cash(user, '–ó–∞—è–≤–∫–∞ –æ—Ç –±–æ—Ç–∞', bot.get_me().username),
                         parse_mode='Markdown')
    except ValueError:
        bot.reply_to(message, '–ù–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö')


def back2(message):
    if message.text == '–ù–∞–∑–∞–¥':
        chat_id = message.chat.id
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        one = types.KeyboardButton('/–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏')
        two = types.KeyboardButton('/–ü—Ä–æ–¥–∞–∂–∞')
        three = types.KeyboardButton('/–ü–æ–∫—É–ø–∫–∞')

        markup.add(one, two, three)
        bot.send_message(chat_id, '–•–æ—Ä–æ—à–æ, –¥–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º –∑–∞–Ω–æ–≤–æ'.format(message.from_user), reply_markup=markup)


def get_data_user_new_mortgage(user, title, bot_name):
    f = Template(
        '$title *$bot_name* \n –í—ã–±–æ—Ä –ø—É–Ω–∫—Ç–∞ 1: *$buy* \n –í—ã–±–æ—Ä –ø—É–Ω–∫—Ç–∞ 2: *$buy_newBuilding* \n '
        '–í—ã–±–æ—Ä –ø—É–Ω–∫—Ç–∞ 3: *$buy_newBuilding_mortgage* \n –î–∞–Ω–Ω—ã–µ: *$buy_newBuilding_mortgage_reg* ')
    return f.substitute({
        'title': title,
        'bot_name': bot_name,
        'buy': user.buy,
        'buy_newBuilding': user.buy_newBuilding,
        'buy_newBuilding_mortgage': user.buy_newBuilding_mortgage,
        'buy_newBuilding_mortgage_reg': user.buy_newBuilding_mortgage_reg
    })


def get_data_user_new_cash(user, title, bot_name):
    f = Template(
        '$title *$bot_name* \n –í—ã–±–æ—Ä –ø—É–Ω–∫—Ç–∞ 1: *$buy* \n –í—ã–±–æ—Ä –ø—É–Ω–∫—Ç–∞ 2: *$buy_newBuilding* \n '
        '–í—ã–±–æ—Ä –ø—É–Ω–∫—Ç–∞ 3: *$buy_newBuilding_cash* \n –î–∞–Ω–Ω—ã–µ: *$buy_newBuilding_cash_reg* ')
    return f.substitute({
        'title': title,
        'bot_name': bot_name,
        'buy': user.buy,
        'buy_newBuilding': user.buy_newBuilding,
        'buy_newBuilding_cash': user.buy_newBuilding_cash,
        'buy_newBuilding_cash_reg': user.buy_newBuilding_cash_reg
    })


@bot.message_handler(commands=['–ü—Ä–æ–¥–∞–∂–∞'])
def choice_sale(message):
    chat_id = message.chat.id
    user_dict[chat_id] = User(message.text)
    user = user_dict[chat_id]
    user.sale = message.text
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    exchange = types.KeyboardButton('–û–±–º–µ–Ω')
    valuation = types.KeyboardButton('–û—Ü–µ–Ω–∫–∞')
    back = types.KeyboardButton('–ù–∞–∑–∞–¥')
    markup.add(exchange, valuation, back)
    msg = bot.send_message(chat_id, '–ü—Ä–æ–¥–æ–ª–∂–∏–º', reply_markup=markup)
    bot.register_next_step_handler(msg, transition_to_exchange)
    bot.register_next_step_handler(msg, transition_to_valuation)
    bot.register_next_step_handler(msg, back3)


def transition_to_exchange(message):
    if message.text == '–û–±–º–µ–Ω':
        chat_id = message.chat.id
        user = user_dict[chat_id]
        user.sale_exchange = message.text
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        secondary = types.KeyboardButton('–í—Ç–æ—Ä–∏—á–∫–∞')
        new_building = types.KeyboardButton('–ù–æ–≤–æ—Å—Ç—Ä–æ–π–∫–∞')
        back = types.KeyboardButton('–ù–∞–∑–∞–¥')
        markup.add(secondary, new_building, back)
        msg = bot.send_message(chat_id, '–ü—Ä–æ–¥–æ–ª–∂–∏–º', reply_markup=markup)
        bot.register_next_step_handler(msg, transition_to_exchange_secondary)
        bot.register_next_step_handler(msg, transition_to_exchange_new)
        bot.register_next_step_handler(msg, back3)


def transition_to_exchange_secondary(message):
    if message.text == '–í—Ç–æ—Ä–∏—á–∫–∞':
        chat_id = message.chat.id
        user = user_dict[chat_id]
        user.sale_exchange_secondary = message.text
        markup = types.ReplyKeyboardRemove(selective=False)
        msg = bot.send_message(chat_id,
                               '–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å, –ø–ª–æ—â–∞–¥—å –≤ –º2 –∏ –≤–∞—à –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä, —á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ –≤–∑—è–∑–∞—Ç—å—Å—è —Å –≤–∞–º–∏:'
                               '(–ü—Ä–∏–º–µ—Ä: –ù–°–ö, –∫—Ä–∞—Å–Ω—ã–π –ø—Ä–æ—Å–ø–µ–∫—Ç 1; 100–º2;79...)',
                               reply_markup=markup)
        bot.register_next_step_handler(msg, checking_transition_to_exchange_secondary)


def transition_to_exchange_new(message):
    if message.text == '–ù–æ–≤–æ—Å—Ç—Ä–æ–π–∫–∞':
        chat_id = message.chat.id
        user = user_dict[chat_id]
        user.sale_exchange_newBuilding = message.text
        markup = types.ReplyKeyboardRemove(selective=False)
        msg = bot.send_message(chat_id,
                               '–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å, –ø–ª–æ—â–∞–¥—å –≤ –º2 –∏ –≤–∞—à –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä, —á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ –≤–∑—è–∑–∞—Ç—å—Å—è —Å –≤–∞–º–∏:'
                               '(–ü—Ä–∏–º–µ—Ä: –ù–°–ö, –∫—Ä–∞—Å–Ω—ã–π –ø—Ä–æ—Å–ø–µ–∫—Ç 1; 100–º2;79...)',
                               reply_markup=markup)
        bot.register_next_step_handler(msg, checking_transition_to_exchange_new)


def checking_transition_to_exchange_secondary(message):
    try:
        chat_id = message.chat.id
        user = user_dict[chat_id]
        user.sale_exchange_secondary_reg = message.text
        bot.send_message(chat_id, '–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞! –ù–∞—à —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ üòä', parse_mode='Markdown')
        bot.send_message(CHAT_ID, get_data_user_exchange_secondary(user, '–ó–∞—è–≤–∫–∞ –æ—Ç –±–æ—Ç–∞', bot.get_me().username),
                         parse_mode='Markdown')
    except ValueError:
        bot.reply_to(message, '–ù–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö')


def checking_transition_to_exchange_new(message):
    try:
        chat_id = message.chat.id
        user = user_dict[chat_id]
        user.sale_exchange_newBuilding_reg = message.text
        bot.send_message(chat_id, '–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞! –ù–∞—à —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ üòä', parse_mode='Markdown')
        bot.send_message(CHAT_ID, get_data_user_exchange_new(user, '–ó–∞—è–≤–∫–∞ –æ—Ç –±–æ—Ç–∞', bot.get_me().username),
                         parse_mode='Markdown')
    except ValueError:
        bot.reply_to(message, '–ù–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö')


def get_data_user_exchange_secondary(user, title, bot_name):
    u = Template(
        '$title *$bot_name* \n –í—ã–±–æ—Ä –ø—É–Ω–∫—Ç–∞ 1: *$sale* \n –í—ã–±–æ—Ä –ø—É–Ω–∫—Ç–∞ 2: *$sale_exchange* \n '
        '–í—ã–±–æ—Ä –ø—É–Ω–∫—Ç–∞ 3: *$sale_exchange_secondary* \n –î–∞–Ω–Ω—ã–µ: *$sale_exchange_secondary_reg* ')
    return u.substitute({
        'title': title,
        'bot_name': bot_name,
        'sale': user.sale,
        'sale_exchange': user.sale_exchange,
        'sale_exchange_secondary': user.sale_exchange_secondary,
        'sale_exchange_secondary_reg': user.sale_exchange_secondary_reg
    })


def get_data_user_exchange_new(user, title, bot_name):
    i = Template(
        '$title *$bot_name* \n –í—ã–±–æ—Ä –ø—É–Ω–∫—Ç–∞ 1: *$sale* \n –í—ã–±–æ—Ä –ø—É–Ω–∫—Ç–∞ 2: *$sale_exchange* \n '
        '–í—ã–±–æ—Ä –ø—É–Ω–∫—Ç–∞ 3: *$sale_exchange_newBuilding* \n –î–∞–Ω–Ω—ã–µ: *$sale_exchange_newBuilding_reg* ')
    return i.substitute({
        'title': title,
        'bot_name': bot_name,
        'sale': user.sale,
        'sale_exchange': user.sale_exchange,
        'sale_exchange_newBuilding': user.sale_exchange_newBuilding,
        'sale_exchange_newBuilding_reg': user.sale_exchange_newBuilding_reg
    })


def transition_to_valuation(message):
    if message.text == '–û—Ü–µ–Ω–∫–∞':
        chat_id = message.chat.id
        user = user_dict[chat_id]
        user.sale_valuation = message.text
        markup = types.ReplyKeyboardRemove(selective=False)
        msg = bot.send_message(chat_id,
                               '–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å, –ø–ª–æ—â–∞–¥—å –≤ –º2 –∏ –≤–∞—à –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä, —á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ —Å–∑—è–∑–∞—Ç—å—Å—è —Å –≤–∞–º–∏:'
                               '(–ü—Ä–∏–º–µ—Ä: –ù–°–ö, –∫—Ä–∞—Å–Ω—ã–π –ø—Ä–æ—Å–ø–µ–∫—Ç 1; 100–º2;79...)',
                               reply_markup=markup)
        bot.register_next_step_handler(msg, checking_transition_to_valuation)


def checking_transition_to_valuation(message):
    try:
        chat_id = message.chat.id
        user = user_dict[chat_id]
        user.sale_valuation_reg = message.text
        bot.send_message(chat_id, '–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞! –ù–∞—à —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ üòä', parse_mode='Markdown')
        bot.send_message(CHAT_ID, get_data_user_valuation(user, '–ó–∞—è–≤–∫–∞ –æ—Ç –±–æ—Ç–∞', bot.get_me().username),
                         parse_mode='Markdown')
    except ValueError:
        bot.reply_to(message, '–ù–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö')


def back3(message):
    if message.text == '–ù–∞–∑–∞–¥':
        chat_id = message.chat.id
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        one = types.KeyboardButton('/–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏')
        two = types.KeyboardButton('/–ü—Ä–æ–¥–∞–∂–∞')
        three = types.KeyboardButton('/–ü–æ–∫—É–ø–∫–∞')

        markup.add(one, two, three)
        bot.send_message(chat_id, '–•–æ—Ä–æ—à–æ, –¥–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º –∑–∞–Ω–æ–≤–æ'.format(message.from_user), reply_markup=markup)


def get_data_user_valuation(user, title, bot_name):
    p = Template(
        '$title *$bot_name* \n –í—ã–±–æ—Ä –ø—É–Ω–∫—Ç–∞ 1: *$sale*  \n –í—ã–±–æ—Ä –ø—É–Ω–∫—Ç–∞ 2: *$sale_valuation* \n '
        '–î–∞–Ω–Ω—ã–µ: *$sale_valuation_reg* ')
    return p.substitute({
        'title': title,
        'bot_name': bot_name,
        'sale': user.sale,
        'sale_valuation': user.sale_valuation,
        'sale_valuation_reg': user.sale_valuation_reg
    })


bot.polling(none_stop=True)
if __name__ == '__main__':
    main()
