"""This is a bot for filling out the client's application"""
import time
from telebot import TeleBot, types
import re
from string import Template
import os

user_dict = {}  # –∏–º–ø—Ä–æ–≤–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö, –≥–¥–µ –º—ã —Ö—Ä–∞–Ω–∏–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–µ—Ç–∏—Ç–µ–ª—è –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç (–∑–∞–º–µ–Ω–∞ –Ω–∞ sql)

bot = TeleBot(os.getenv("TOKEN"))
CHAT_ID = os.getenv("CHAT_ID")
user = ''
chat_id = ''


class User:  # –º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
    """Class for data processing"""

    def __init__(self, Id):
        self.Id = str(Id)


@bot.message_handler(commands=['start'])
def main(message: types.Message):
    """ function gets a message and gives the user the choice to go the next choice.

    :param message: data of chat, user, ...
    :type message: dict"""
    global user
    global chat_id
    chat_id = str(message.chat.id)
    user = User(message.from_user.id)
    user_dict[user.Id] = {}
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    b_inv = types.KeyboardButton('/–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏')
    b_sale = types.KeyboardButton('/–ü—Ä–æ–¥–∞–∂–∞')
    b_pay = types.KeyboardButton('/–ü–æ–∫—É–ø–∫–∞')
    markup.add(b_inv, b_sale, b_pay)
    bot.send_message(message.chat.id,
                     f'–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}, —è –±–æ—Ç –∏ —Ç—ã –º–æ–∂–µ—à—å –≤—ã–±—Ä–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è!',
                     reply_markup=markup)


@bot.message_handler(commands=['–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏'])
def inv(message, *args, **kwargs):
    user_dict.update({user.Id: {inv.__name__: message.text}})
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    cash = types.KeyboardButton('–ù–∞–ª–∏—á–Ω—ã–µ')
    mortgage = types.KeyboardButton('–ò–ø–æ—Ç–µ–∫–∞')
    back = types.KeyboardButton('–ù–∞–∑–∞–¥')
    markup.add(cash, mortgage, back)
    msg = bot.send_message(chat_id,
                           '–ü—Ä–æ–¥–æ–ª–∂–∏–º', reply_markup=markup)
    bot.register_next_step_handler(msg, inv_to_cash)
    bot.register_next_step_handler(msg, inv_to_mortgage)
    bot.register_next_step_handler(msg, return_back)


def inv_to_cash(message: types.Message):
    if message.text == '–ù–∞–ª–∏—á–Ω—ã–µ':
        user_dict[user.Id].update({inv_to_cash.__name__: message.text})
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        back = types.KeyboardButton('–ù–∞–∑–∞–¥')
        markup.add(back)
        msg = bot.send_message(chat_id,
                               '–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∏ –≤–∞—à –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä, —á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –≤–∞–º–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:'
                               '123456789;81234567890', reply_markup=markup)  # –†–ê–ó–î–ï–õ–ò–¢–¨ –ù–ê 2 –§–£–ù–ö–¶–ò–ò
        bot.register_next_step_handler(msg, che—Åk_inv_to_cash)


def che—Åk_inv_to_cash(message: types.Message):
    """function gets a message,  checks it and sends data to the telegram channel"""
    user_dict[user.Id].update({che—Åk_inv_to_cash.__name__: message.text})
    try:
        if len(re.findall(r'\d+;\d{11,12}', message.text)) != 1:
            if message.text == '–ù–∞–∑–∞–¥':
                return_back(message)
            else:
                bot.send_message(chat_id,
                                 '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞')
                message.text = "–ù–∞–ª–∏—á–Ω—ã–µ"
                transition_to_cash(message)

        else:
            bot.send_message(chat_id, '–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞! –ù–∞—à —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ üòä',
                             parse_mode='Markdown')
            bot.send_message(CHAT_ID,
                             send_data_user_inv_to_cash(user_dict, '–ó–∞—è–≤–∫–∞ –æ—Ç –±–æ—Ç–∞', bot.get_me().username,
                                                        message.from_user.first_name),
                             parse_mode='Markdown')

    except Exception:
        message.text = '–ù–∞–∑–∞–¥'
        return_back(message)


def send_data_user_inv_to_cash(data, title, bot_name, username):
    """function of decorating the output of strings in the telegram channel"""
    temp = Template(
        '$title *$bot_name* \n –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: *$username* \n –í—ã–±–æ—Ä –ø—É–Ω–∫—Ç–∞ 1: *$investment* \n '
        '–í—ã–±–æ—Ä –ø—É–Ω–∫—Ç–∞ 2: *inv_to_cash* \n –î–∞–Ω–Ω—ã–µ : *$check_inv_to_cash*')
    return temp.substitute({
        'title': title,
        'bot_name': bot_name,
        'username': username,
        'investment': data[user.Id][inv.__name__],
        'inv_to_cash': data[user.Id][inv_to_cash.__name__],
        'check_inv_to_cash': data[user.Id][che—Åk_inv_to_cash.__name__]
    })


def inv_to_mortgage(message):
    if message.text == '–ò–ø–æ—Ç–µ–∫–∞':
        user_dict[user.Id].update({inv_to_mortgage.__name__: message.text})
        markup = types.ReplyKeyboardRemove(selective=False)
        msg = bot.send_message(chat_id,
                               '–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–π –≤–∑–Ω–æ—Å, –∫–æ–º—Ñ–æ—Ä—Ç–Ω—ã–π –ø–ª–∞—Ç–µ–∂ –∏ –≤–∞—à –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä, '
                               '—á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –≤–∞–º–∏: (–ü—Ä–∏–º–µ—Ä: 40000000;1000000;15000;79...), '
                               '–µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è, –Ω–∞–ø–∏—à–∏—Ç–µ back', reply_markup=markup)
        bot.register_next_step_handler(msg, check_inv_to_mortgage)


def check_inv_to_mortgage(message):
    try:
        if len(re.findall(r'\d+;\d+;\d+;\d{11,12}', message.text)) != 1:
            bot.send_message(chat_id, '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞', parse_mode='Markdown')
            print(message.text)
            message.text = "–ò–ø–æ—Ç–µ–∫–∞"
            transition_to_mortgage(message)
        else:
            user_dict[user.Id].update({check_inv_to_mortgage.__name__: message.text})
            bot.send_message(chat_id, '–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞! –ù–∞—à —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ üòä',
                             parse_mode='Markdown')
            bot.send_message(CHAT_ID, get_data_user_inv_mortgage(user_dict, '–ó–∞—è–≤–∫–∞ –æ—Ç –±–æ—Ç–∞', bot.get_me().username,
                                                                 message.from_user.first_name, ))

    except Exception:
        message.text = '–ù–∞–∑–∞–¥'
        return_back(message)


def get_data_user_inv_mortgage(data, title, bot_name, username):
    temp = Template(
        '$title *$bot_name*\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: *$username*\n–í—ã–±–æ—Ä –ø—É–Ω–∫—Ç–∞ 1: *$inv*\n–í—ã–±–æ—Ä –ø—É–Ω–∫—Ç–∞ 2: *$inv_to_mortgage*\n'
        '–î–∞–Ω–Ω—ã–µ: *$check_inv_to_mortgage*')
    return temp.substitute({
        'title': title,
        'bot_name': bot_name,
        'username': username,
        'inv': data[user.Id][inv.__name__],
        'inv_to_mortgage': data[user.Id][inv_to_mortgage.__name__],
        'check_inv_to_mortgage': data[user.Id][check_inv_to_mortgage.__name__]
    })


def return_back(message):
    if message.text == '–ù–∞–∑–∞–¥':
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        b_inv = types.KeyboardButton('/–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏')
        b_sale = types.KeyboardButton('/–ü—Ä–æ–¥–∞–∂–∞')
        b_buy = types.KeyboardButton('/–ü–æ–∫—É–ø–∫–∞')
        markup.add(b_inv, b_sale, b_buy)
        bot.send_message(chat_id, '–•–æ—Ä–æ—à–æ, –¥–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º –∑–∞–Ω–æ–≤–æ'.format(message.from_user), reply_markup=markup)


@bot.message_handler(commands=['–ü–æ–∫—É–ø–∫–∞'])
def buy(message):
    user_dict.update({user.Id: {buy.__name__: message.text}})
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    secondary = types.KeyboardButton('–í—Ç–æ—Ä–∏—á–∫–∞')
    new_building = types.KeyboardButton('–ù–æ–≤–æ—Å—Ç—Ä–æ–π–∫–∞')
    back = types.KeyboardButton('–ù–∞–∑–∞–¥')
    markup.add(secondary, new_building, back)
    msg = bot.send_message(chat_id, '–ü—Ä–æ–¥–æ–ª–∂–∏–º', reply_markup=markup)
    bot.register_next_step_handler(msg, buy_to_secondary)
    bot.register_next_step_handler(msg, buy_to_new)
    bot.register_next_step_handler(msg, return_back)


def buy_to_secondary(message):
    if message.text == '–í—Ç–æ—Ä–∏—á–∫–∞':
        user_dict[user.Id].update({buy_to_secondary.__name__: message.text})
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        mortgage = types.KeyboardButton('–ò–ø–æ—Ç–µ–∫–∞')
        cash = types.KeyboardButton('–ù–∞–ª–∏—á–Ω—ã–µ')
        back = types.KeyboardButton('–ù–∞–∑–∞–¥')
        markup.add(mortgage, cash, back)
        msg = bot.send_message(chat_id, '–ü—Ä–æ–¥–æ–ª–∂–∏–º', reply_markup=markup)
        bot.register_next_step_handler(msg, buy_to_secondary_mortgage)
        bot.register_next_step_handler(msg, buy_to_secondary_cash)
        bot.register_next_step_handler(msg, return_back)


def buy_to_secondary_mortgage(message):
    if message.text == '–ò–ø–æ—Ç–µ–∫–∞':
        user_dict[user.Id].update({buy_to_secondary_mortgage.__name__: message.text})
        msg = bot.send_message(chat_id,
                               '–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–π –≤–∑–Ω–æ—Å, –∫–æ–º—Ñ–æ—Ä—Ç–Ω—ã–π –ø–ª–∞—Ç–µ–∂ –∏ –≤–∞—à –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä, '
                               '—á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –≤–∞–º–∏:(–ü—Ä–∏–º–µ—Ä: 40000000;1000000;15000;79...)')
        bot.register_next_step_handler(msg, check_buy_to_secondary_mortgage)


def check_buy_to_secondary_mortgage(message):
    try:
        if len(re.findall(r'\d+;\d+;\d+;\d{11,12}', message.text)) != 1:
            bot.send_message(chat_id, '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞', parse_mode='Markdown')
            message.text = "–ò–ø–æ—Ç–µ–∫–∞"
            buy_to_secondary_mortgage(message)

        else:
            user_dict[user.Id].update({check_buy_to_secondary_mortgage.__name__: message.text})
            bot.send_message(chat_id, '–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞! –ù–∞—à —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ üòä',
                             parse_mode='Markdown')
            bot.send_message(CHAT_ID,
                             send_data_user_secondary_mortgage(user_dict, '–ó–∞—è–≤–∫–∞ –æ—Ç –±–æ—Ç–∞', bot.get_me().username,
                                                               message.from_user.first_name), parse_mode='Markdown')
    except Exception:
        message.text = '–ù–∞–∑–∞–¥'
        return_back(message)


def send_data_user_secondary_mortgage(data, title, name, username):
    temp = Template(
        '$title *$name* \n –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: *$username* \n –í—ã–±–æ—Ä –ø—É–Ω–∫—Ç–∞ 1: *$buy* \n –í—ã–±–æ—Ä –ø—É–Ω–∫—Ç–∞ 2: *$buy_to_secondary*'
        '\n–í—ã–±–æ—Ä –ø—É–Ω–∫—Ç–∞ 3: *$buy_to_secondary_mortgage*\n–î–∞–Ω–Ω—ã–µ: *$check_buy_to_secondary_mortgage* ')
    return temp.substitute({
        'title': title,
        'name': name,
        'username': username,
        'buy': data[user.Id][buy.__name__],
        'buy_to_secondary': data[user.Id][buy_to_secondary.__name__],
        'buy_to_secondary_mortgage': data[user.Id][buy_to_secondary_mortgage.__name__],
        'check_buy_to_secondary_mortgage': data[user.Id][check_buy_to_secondary_mortgage.__name__]
    })


def buy_to_secondary_cash(message):
    if message.text == '–ù–∞–ª–∏—á–Ω—ã–µ':
        user_dict[user.Id].update({buy_to_secondary_cash.__name__: message.text})
        markup = types.ReplyKeyboardRemove(selective=False)
        msg = bot.send_message(chat_id,
                               '–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, –∫–æ–º—Ñ–æ—Ä—Ç–Ω—ã–π –ø–ª–∞—Ç–µ–∂ –∏ –≤–∞—à –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä, —á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ —Å–≤—è–∑–∞—Ç—å—Å—è '
                               '—Å –≤–∞–º–∏:(–ü—Ä–∏–º–µ—Ä: 40000000;79...)',
                               reply_markup=markup)
        bot.register_next_step_handler(msg, check_buy_to_secondary_cash)


def check_buy_to_secondary_cash(message):
    try:
        if len(re.findall(r'\d+;\d{11,12}', message.text)) != 1:
            bot.send_message(chat_id, '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞', parse_mode='Markdown')
            message.text = "–ù–∞–ª–∏—á–Ω—ã–µ"
            buy_to_secondary_cash(message)
        else:
            user_dict[user.Id].update({check_buy_to_secondary_cash.__name__: message.text})
            bot.send_message(chat_id, '–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞! –ù–∞—à —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ üòä',
                             parse_mode='Markdown')
            bot.send_message(CHAT_ID,
                             send_data_user_secondary_cash(user_dict, '–ó–∞—è–≤–∫–∞ –æ—Ç –±–æ—Ç–∞', bot.get_me().username,
                                                           message.from_user.first_name), parse_mode='Markdown')

    except ValueError:
        bot.reply_to(message, '–ù–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö')


def send_data_user_secondary_cash(data, title, bot_name, username):
    temp = Template(
        '$title *$bot_name*\n –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: *$username*\n–í—ã–±–æ—Ä –ø—É–Ω–∫—Ç–∞ 1: *$buy*\n'
        '–í—ã–±–æ—Ä –ø—É–Ω–∫—Ç–∞ 2: *$buy_to_secondary*\n–í—ã–±–æ—Ä –ø—É–Ω–∫—Ç–∞ 3: '
        '*$buy_to_secondary_cash*\n–î–∞–Ω–Ω—ã–µ: *$check_buy_to_secondary_cash* ')
    return temp.substitute({
        'title': title,
        'bot_name': bot_name,
        'username': username,
        'buy': data[user.Id][buy.__name__],
        'buy_to_secondary': data[user.Id][buy_to_secondary.__name__],
        'buy_to_secondary_cash': data[user.Id][buy_to_secondary_cash.__name__],
        'check_buy_to_secondary_cash': data[user.Id][check_buy_to_secondary_cash.__name__]
    })


def buy_to_new(message):
    if message.text == '–ù–æ–≤–æ—Å—Ç—Ä–æ–π–∫–∞':
        user_dict[user.Id].update({buy_to_new.__name__: message.text})
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        mortgage = types.KeyboardButton('–ò–ø–æ—Ç–µ–∫–∞')
        cash = types.KeyboardButton('–ù–∞–ª–∏—á–Ω—ã–µ')
        back = types.KeyboardButton('–ù–∞–∑–∞–¥')
        markup.add(mortgage, cash, back)
        msg = bot.send_message(chat_id, '–ü—Ä–æ–¥–æ–ª–∂–∏–º', reply_markup=markup)
        bot.register_next_step_handler(msg, buy_to_new_mortgage)
        bot.register_next_step_handler(msg, buy_to_new_cash)
        bot.register_next_step_handler(msg, return_back)


def buy_to_new_mortgage(message):
    if message.text == '–ò–ø–æ—Ç–µ–∫–∞':
        user_dict[user.Id].update({buy_to_new_mortgage.__name__: message.text})
        markup = types.ReplyKeyboardRemove(selective=False)
        msg = bot.send_message(chat_id,
                               '–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–π –≤–∑–Ω–æ—Å, –∫–æ–º—Ñ–æ—Ä—Ç–Ω—ã–π –ø–ª–∞—Ç–µ–∂ –∏ –≤–∞—à –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä, '
                               '—á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –≤–∞–º–∏:(–ü—Ä–∏–º–µ—Ä: 40000000;1000000;15000;79...)',
                               reply_markup=markup)
        bot.register_next_step_handler(msg, check_buy_to_new_mortgage)


def check_buy_to_new_mortgage(message):
    try:
        if len(re.findall(r'\d+;\d+;\d+;\d{11,12}', message.text)) != 1:
            bot.send_message(chat_id, '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞', parse_mode='Markdown')
            message.text = "–ò–ø–æ—Ç–µ–∫–∞"
            buy_to_new_mortgage(message)

        else:
            user_dict[user.Id].update({check_buy_to_new_mortgage.__name__: message.text})
            bot.send_message(chat_id, '–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞! –ù–∞—à —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ üòä',
                             parse_mode='Markdown')
            bot.send_message(CHAT_ID,
                             send_data_user_new_mortgage(user_dict, '–ó–∞—è–≤–∫–∞ –æ—Ç –±–æ—Ç–∞', bot.get_me().username,
                                                         message.from_user.first_name), parse_mode='Markdown')
    except Exception:
        message.text = '–ù–∞–∑–∞–¥'
        return_back(message)


def send_data_user_new_mortgage(data, title, bot_name, username):
    temp = Template(
        '$title *$bot_name*\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: *$username*\n–í—ã–±–æ—Ä –ø—É–Ω–∫—Ç–∞ 1: *$buy*\n–í—ã–±–æ—Ä –ø—É–Ω–∫—Ç–∞ 2: *$buy_to_new*\n'
        '–í—ã–±–æ—Ä –ø—É–Ω–∫—Ç–∞ 3: *$buy_to_new_mortgage*\n–î–∞–Ω–Ω—ã–µ: *$check_buy_to_new_mortgage* ')
    return temp.substitute({
        'title': title,
        'bot_name': bot_name,
        'username': username,
        'buy': data[user.Id][buy.__name__],
        'buy_to_new': data[user.Id][buy_to_new.__name__],
        'buy_to_new_mortgage': data[user.Id][buy_to_new_mortgage.__name__],
        'check_buy_to_new_mortgage': data[user.Id][check_buy_to_new_mortgage.__name__]
    })


def buy_to_new_cash(message):
    if message.text == '–ù–∞–ª–∏—á–Ω—ã–µ':
        user_dict[user.Id].update({buy_to_new_cash.__name__: message.text})
        markup = types.ReplyKeyboardRemove(selective=False)
        msg = bot.send_message(chat_id,
                               '–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∏ –≤–∞—à –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä, —á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ –≤–∑—è–∑–∞—Ç—å—Å—è —Å –≤–∞–º–∏:'
                               '(–ü—Ä–∏–º–µ—Ä: 40000000;79...)', reply_markup=markup)
        bot.register_next_step_handler(msg, check_buy_to_new_cash)


def check_buy_to_new_cash(message):
    try:
        if len(re.findall(r'\d+;\d{11,12}', message.text)) != 1:
            bot.send_message(chat_id, '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞', parse_mode='Markdown')
            message.text = "–ù–∞–ª–∏—á–Ω—ã–µ"
            buy_to_new_cash(message)

        else:
            user_dict[user.Id].update({check_buy_to_new_cash.__name__: message.text})
            bot.send_message(chat_id, '–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞! –ù–∞—à —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ üòä',
                             parse_mode='Markdown')
            bot.send_message(CHAT_ID,
                             send_data_user_new_cash(user_dict, '–ó–∞—è–≤–∫–∞ –æ—Ç –±–æ—Ç–∞', bot.get_me().username,
                                                     message.from_user.first_name), parse_mode='Markdown')
    except Exception:
        message.text = '–ù–∞–∑–∞–¥'
        return_back(message)


def send_data_user_new_cash(data, title, bot_name, username):
    temp = Template(
        '$title *$bot_name*\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: *$username*\n–í—ã–±–æ—Ä –ø—É–Ω–∫—Ç–∞ 1: *$buy*\n–í—ã–±–æ—Ä –ø—É–Ω–∫—Ç–∞ 2: *$buy_to_new*\n'
        '–í—ã–±–æ—Ä –ø—É–Ω–∫—Ç–∞ 3: *$buy_to_new_cash*\n–î–∞–Ω–Ω—ã–µ: *$check_buy_to_new_cash* ')
    return temp.substitute({
        'title': title,
        'bot_name': bot_name,
        'username': username,
        'buy': data[user.Id][buy.__name__],
        'buy_to_new': data[user.Id][buy_to_new.__name__],
        'buy_to_new_cash': data[user.Id][buy_to_new_cash.__name__],
        'check_buy_to_new_cash': data[user.Id][check_buy_to_new_cash.__name__]
    })


@bot.message_handler(commands=['–ü—Ä–æ–¥–∞–∂–∞'])
def sale(message):
    user_dict.update({user.Id: {sale.__name__: message.text}})
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    exchange = types.KeyboardButton('–û–±–º–µ–Ω')
    valuation = types.KeyboardButton('–û—Ü–µ–Ω–∫–∞')
    back = types.KeyboardButton('–ù–∞–∑–∞–¥')
    markup.add(exchange, valuation, back)
    msg = bot.send_message(chat_id, '–ü—Ä–æ–¥–æ–ª–∂–∏–º', reply_markup=markup)
    bot.register_next_step_handler(msg, sale_to_exchange)
    bot.register_next_step_handler(msg, sale_to_valuation)
    bot.register_next_step_handler(msg, return_back)


def sale_to_exchange(message):
    if message.text == '–û–±–º–µ–Ω':
        user_dict[user.Id].update({sale_to_exchange.__name__: message.text})
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        secondary = types.KeyboardButton('–í—Ç–æ—Ä–∏—á–∫–∞')
        new_building = types.KeyboardButton('–ù–æ–≤–æ—Å—Ç—Ä–æ–π–∫–∞')
        back = types.KeyboardButton('–ù–∞–∑–∞–¥')
        markup.add(secondary, new_building, back)
        msg = bot.send_message(chat_id, '–ü—Ä–æ–¥–æ–ª–∂–∏–º', reply_markup=markup)
        bot.register_next_step_handler(msg, sale_to_exchange_secondary)
        bot.register_next_step_handler(msg, sale_to_exchange_new)
        bot.register_next_step_handler(msg, return_back)


def sale_to_exchange_secondary(message):
    if message.text == '–í—Ç–æ—Ä–∏—á–∫–∞':
        user_dict[user.Id].update({sale_to_exchange_secondary.__name__: message.text})
        markup = types.ReplyKeyboardRemove(selective=False)
        msg = bot.send_message(chat_id,
                               '–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å, –ø–ª–æ—â–∞–¥—å –≤ –º2 –∏ –≤–∞—à –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä, —á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ –≤–∑—è–∑–∞—Ç—å—Å—è —Å –≤–∞–º–∏:'
                               '(–ü—Ä–∏–º–µ—Ä: –ù–°–ö; –∫—Ä–∞—Å–Ω—ã–π –ø—Ä–æ—Å–ø–µ–∫—Ç 1; 100–º2;79...)',
                               reply_markup=markup)
        bot.register_next_step_handler(msg, check_sale_to_exchange_secondary)


def check_sale_to_exchange_secondary(message):
    try:
        if re.search(r'[–ê-–Ø–Å–∞-—è—ë]+;[\d–ê-–Ø–Å–∞-—è—ë\s]+;[\d–ê-–Ø–Å–∞-—è—ë\s]+;\d{11,12}', message.text).group() is None:
            bot.send_message(chat_id, '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞', parse_mode='Markdown')
            message.text = "–í—Ç–æ—Ä–∏—á–∫–∞"
            sale_to_exchange_secondary(message)

        else:
            user_dict[user.Id].update({check_sale_to_exchange_secondary.__name__: message.text})
            bot.send_message(chat_id, '–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞! –ù–∞—à —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ üòä',
                             parse_mode='Markdown')
            bot.send_message(CHAT_ID,
                             send_data_user_exchange_secondary(user_dict, '–ó–∞—è–≤–∫–∞ –æ—Ç –±–æ—Ç–∞', bot.get_me().username,
                                                               message.from_user.first_name), parse_mode='Markdown')
    except Exception:
        message.text = '–ù–∞–∑–∞–¥'
        return_back(message)


def send_data_user_exchange_secondary(data, title, bot_name, username):
    temp = Template(
        '$title *$bot_name*\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: *$username*\n–í—ã–±–æ—Ä –ø—É–Ω–∫—Ç–∞ 1: *$sale* \n –í—ã–±–æ—Ä –ø—É–Ω–∫—Ç–∞ 2: '
        '*sale_to_exchange*\n–í—ã–±–æ—Ä –ø—É–Ω–∫—Ç–∞ 3: *sale_to_exchange_secondary*\n–î–∞–Ω–Ω—ã–µ: *check_sale_to_exchange_secondary* ')
    return temp.substitute({
        'title': title,
        'bot_name': bot_name,
        'username': username,
        'sale': data[user.Id][sale.__name__],
        'sale_to_exchange': data[user.Id][sale_to_exchange.__name__],
        'sale_to_exchange_secondary': data[user.Id][sale_to_exchange_secondary.__name__],
        'check_sale_to_exchange_secondary': data[user.Id][check_sale_to_exchange_secondary.__name__]
    })


def sale_to_exchange_new(message):
    if message.text == '–ù–æ–≤–æ—Å—Ç—Ä–æ–π–∫–∞':
        user_dict[user.Id].update({sale_to_exchange_new.__name__: message.text})
        markup = types.ReplyKeyboardRemove(selective=False)
        msg = bot.send_message(chat_id,
                               '–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å, –ø–ª–æ—â–∞–¥—å –≤ –º2 –∏ –≤–∞—à –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä, —á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ –≤–∑—è–∑–∞—Ç—å—Å—è —Å –≤–∞–º–∏:'
                               '(–ü—Ä–∏–º–µ—Ä: –ù–°–ö; –∫—Ä–∞—Å–Ω—ã–π –ø—Ä–æ—Å–ø–µ–∫—Ç 1; 100–º2;79...)',
                               reply_markup=markup)
        bot.register_next_step_handler(msg, check_sale_to_exchange_new)


def check_sale_to_exchange_new(message):
    try:
        if not re.search(r'[–ê-–Ø–Å–∞-—è—ë]+;[\d–ê-–Ø–Å–∞-—è—ë\s]+;[\d–ê-–Ø–Å–∞-—è—ë\s]+;\d{11,12}', message.text).group():
            bot.send_message(chat_id, '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞', parse_mode='Markdown')
            message.text = "–ù–æ–≤–æ—Å—Ç—Ä–æ–π–∫–∞"
            sale_to_exchange_new(message)

        else:
            user_dict[user.Id].update({check_sale_to_exchange_new.__name__: message.text})
            bot.send_message(chat_id, '–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞! –ù–∞—à —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ üòä',
                             parse_mode='Markdown')
            bot.send_message(CHAT_ID,
                             send_data_user_exchange_new(user_dict, '–ó–∞—è–≤–∫–∞ –æ—Ç –±–æ—Ç–∞', bot.get_me().username,
                                                         message.from_user.first_name), parse_mode='Markdown')
    except Exception:
        message.text = '–ù–∞–∑–∞–¥'
        return_back(message)


def send_data_user_exchange_new(data, title, bot_name, username):
    temp = Template(
        '$title *$bot_name*\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: *$username*\n–í—ã–±–æ—Ä –ø—É–Ω–∫—Ç–∞ 1: *$sale*\n–í—ã–±–æ—Ä –ø—É–Ω–∫—Ç–∞ 2: *sale_to_exchange*\n'
        '–í—ã–±–æ—Ä –ø—É–Ω–∫—Ç–∞ 3: *sale_to_exchange_new*\n–î–∞–Ω–Ω—ã–µ: *check_sale_to_exchange_new* ')
    return temp.substitute({
        'title': title,
        'bot_name': bot_name,
        'username': username,
        'sale': data[user.Id][sale.__name__],
        'sale_to_exchange': data[user.Id][sale_to_exchange.__name__],
        'sale_to_exchange_new': data[user.Id][sale_to_exchange_new.__name__],
        'check_sale_to_exchange_new': data[user.Id][check_sale_to_exchange_new.__name__]
    })


def sale_to_valuation(message):
    if message.text == '–û—Ü–µ–Ω–∫–∞':
        user_dict[user.Id].update({sale_to_valuation.__name__: message.text})
        markup = types.ReplyKeyboardRemove(selective=False)
        msg = bot.send_message(chat_id,
                               '–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å, –ø–ª–æ—â–∞–¥—å –≤ –º2 –∏ –≤–∞—à –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä, —á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –≤–∞–º–∏:'
                               '(–ü—Ä–∏–º–µ—Ä: –ù–°–ö, –∫—Ä–∞—Å–Ω—ã–π –ø—Ä–æ—Å–ø–µ–∫—Ç 1; 100–º2;79...)',
                               reply_markup=markup)
        bot.register_next_step_handler(msg, check_sale_to_valuation)


def check_sale_to_valuation(message):
    try:
        user_dict[user.Id].update({check_sale_to_valuation.__name__: message.text})
        bot.send_message(chat_id, '–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞! –ù–∞—à —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ üòä', parse_mode='Markdown')
        bot.send_message(CHAT_ID, send_data_user_valuation(user_dict, '–ó–∞—è–≤–∫–∞ –æ—Ç –±–æ—Ç–∞', bot.get_me().username),
                         parse_mode='Markdown')
    except ValueError:
        bot.reply_to(message, '–ù–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö')


def send_data_user_valuation(data, title, bot_name):
    temp = Template(
        '$title *$bot_name* \n –í—ã–±–æ—Ä –ø—É–Ω–∫—Ç–∞ 1: *$sale*  \n –í—ã–±–æ—Ä –ø—É–Ω–∫—Ç–∞ 2: *sale_to_valuation* \n '
        '–î–∞–Ω–Ω—ã–µ: *check_sale_to_valuation* ')
    return temp.substitute({
        'title': title,
        'bot_name': bot_name,
        'sale': data[user.Id][sale.__name__],
        'sale_to_valuation': data[user.Id][sale_to_valuation.__name__],
        'check_sale_to_valuation': data[user.Id][check_sale_to_valuation.__name__]
    })


bot.polling(none_stop=True)
if __name__ == '__main__':
    main()
